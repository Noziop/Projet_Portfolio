services:
  traefik:
    image: traefik:v2.5
    command:
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/config:/etc/traefik
      - ./docker/traefik/dynamic:/etc/traefik/dynamic
    ports:
      - "8085:8085"  # Au lieu de 80:80
      - "8081:8080"
    labels:
      - "traefik.enable=true"
    networks:
      traefik_network:
        ipv4_address: 172.18.0.7

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: "65534:65534"
    volumes:
      - ./docker/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.stellarstudio.fassih.ch`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
    depends_on:
      - backend
    env_file:
      - .env
    networks:
      - traefik_network

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.stellarstudio.fassih.ch`)"
      - "traefik.http.routers.grafana.entrypoints=web"
    depends_on:
      - prometheus
    env_file:
      - .env
    networks:
      - traefik_network

  backend:
    build: ./backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.stellarstudio.fassih.ch`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    volumes:
      - ./backend:/app
      - ./tmp:/app/tmp
    user: "1030:100"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - traefik_network

  celery-download:
    hostname: "celery-download-${CELERY_WORKER_ID:-1}"
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    environment:
    - PYTHONPATH=/app
    - CELERY_WORKER_NAME=download-worker-${HOSTNAME}
    volumes:
      - ./backend:/app
      - ./tmp:/app/tmp
    env_file:
      - .env
    command: >
      celery -A app.core.celery worker 
      -Q download_queue 
      -n "download-worker-$${HOSTNAME}@%h" 
      --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 4
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.core.celery inspect ping -d download@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - traefik_network

  celery-processing:
    hostname: "celery-processing-${CELERY_WORKER_ID:-1}"
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    environment:
    - PYTHONPATH=/app
    - CELERY_WORKER_NAME=processing-worker-${HOSTNAME}
    volumes:
      - ./backend:/app
      - ./tmp:/app/tmp
    env_file:
      - .env
    command: >
      celery -A app.core.celery worker 
      -Q processing_queue 
      -n "processing-worker-$${HOSTNAME}@%h" 
      --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 4
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.core.celery inspect ping -d processing@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - traefik_network

  celery-exporter:
    image: grafana/celery-exporter
    command: >
      --broker-url=redis://redis:6379/0
      --queues=download_queue:type=download,processing_queue:type=processing
    environment:
      - TZ=Europe/Paris
      - CE_BROKER_URL=redis://redis:6379/0
      - CE_BUCKETS=1,2.5,5,10,30,60,300,600,900,1800
      - CELERY_QUEUE_NAME_MAPPING=download_queue:download,processing_queue:processing
      - CELERY_WORKER_NAME_MAPPING=celery-download:download,celery-
    networks:
      - traefik_network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_BROWSER: "off"
    volumes:
      - minio-data:/data
    labels:
      - "traefik.enable=true"
      # API S3
      - "traefik.http.routers.minio-api.rule=Host(`minio.stellarstudio.fassih.ch`) && PathPrefix(`/api`)"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    networks:
      - traefik_network

  frontend:
    build: ./frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`stellarstudio.fassih.ch`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=8080"
    volumes:
      - ./frontend:/app:delegated
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    env_file:
      - .env
    networks:
      - traefik_network

  database:
    image: mariadb:10.5
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./data/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    networks:
      - traefik_network

  mariadb-exporter:
    image: prom/mysqld-exporter
    user: "1030:100"
    volumes:
      - ${PWD}/config.my-cnf:/etc/mysqld_exporter/config.my-cnf
    command:
      - --config.my-cnf=/etc/mysqld_exporter/config.my-cnf
      - --collect.info_schema.tables
      - --collect.info_schema.innodb_metrics
      - --collect.global_status
      - --collect.global_variables
      - --collect.slave_status
      - --collect.info_schema.processlist
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    networks:
      - traefik_network

  redis:
    image: redis:7-alpine
    user: "1030:1030"
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    networks:
      - traefik_network

  redis-exporter:
    image: oliver006/redis_exporter
    command: --redis.addr=redis://redis:6379
    networks:
      - traefik_network

volumes:
  grafana-data:
  prometheus-data:
  minio-data:
    driver: local
  frontend_node_modules:
  tmp:
    driver: local

networks:
  traefik_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/24
          gateway: 172.18.0.1
