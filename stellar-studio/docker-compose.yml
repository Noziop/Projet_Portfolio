version: '3.9'

services:
  traefik:
    image: traefik:v2.5
    command:
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/config:/etc/traefik
      - ./docker/traefik/dynamic:/etc/traefik/dynamic
    ports:
      - "8085:8085"  # Au lieu de 80:80
      - "8081:8080"
    labels:
      - "traefik.enable=true"
    networks:
      traefik_network:
        ipv4_address: 172.18.0.7

  prometheus:
    image: prom/prometheus:latest
    user: "65534:65534"
    volumes:
      - ./docker/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.stellarstudio.app`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.middlewares.auth-prometheus.basicAuth.users=${PROMETHEUS_USERNAME}:${PROMETHEUS_PASSWORD_HASH}"
      - "traefik.http.routers.prometheus.middlewares=auth-prometheus"
      - "traefik.http.routers.grafana-to-prometheus.middlewares=no-auth"
    depends_on:
      - backend
    env_file:
      - .env
    networks:
      traefik_network:
        ipv4_address: 172.18.0.70

  grafana:
    image: grafana/grafana-oss
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.stellarstudio.app`)"
      - "traefik.http.routers.grafana.entrypoints=web"
    depends_on:
      - prometheus
    env_file:
      - .env
    networks:
      traefik_network:
        ipv4_address: 172.18.0.11

  backend:
    build: 
      context: ./backend
      args:
        BUILDKIT_INLINE_CACHE: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.stellarstudio.app`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    volumes:
      - ./backend:/app
      - ./tmp:/app/tmp
    user: "1030:100"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
      traefik:
        condition: service_started
      celery-exporter:
        condition: service_started
      mariadb-exporter:
        condition: service_started
      redis-exporter:
        condition: service_started
      node-exporter:
        condition: service_started
      minio:
        condition: service_started
    deploy:
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      traefik_network:

  celery-download:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
      args:
        BUILDKIT_INLINE_CACHE: 1
    environment:
    - PYTHONPATH=/app
    - CELERY_WORKER_ID=${WORKER_INDEX:-0}
    volumes:
      - ./backend:/app
      - ./tmp:/app/tmp
    env_file:
      - .env
    command: >
      celery -A app.core.celery worker 
      -Q download,download_files
      --loglevel=info
      --concurrency=1
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
      traefik:
        condition: service_started
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
      celery-exporter:
        condition: service_started
      mariadb-exporter:
        condition: service_started
      redis-exporter:
        condition: service_started
      node-exporter:
        condition: service_started
      minio:
        condition: service_started
      frontend:
        condition: service_started
    deploy:
      mode: replicated
      replicas: 4
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.core.celery inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      traefik_network:

  celery-processing:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
      args:
        BUILDKIT_INLINE_CACHE: 1
    environment:
    - PYTHONPATH=/app
    volumes:
      - ./backend:/app
      - ./tmp:/app/tmp
    env_file:
      - .env
    command: >
      celery -A app.core.celery worker 
      -Q processing 
      --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
      traefik:
        condition: service_started
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
      celery-exporter:
        condition: service_started
      mariadb-exporter:
        condition: service_started
      redis-exporter:
        condition: service_started
      node-exporter:
        condition: service_started
      minio:
        condition: service_started
      frontend:
        condition: service_started
    deploy:
      mode: replicated
      replicas: 4
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.core.celery inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      traefik_network:

  celery-exporter:
    image: grafana/celery-exporter
    command: >
      --broker-url=redis://redis:6379/0
      --queues=download:type=download,processing:type=processing
    environment:
      - TZ=Europe/Paris
      - CE_BROKER_URL=redis://redis:6379/0
      - CE_BUCKETS=1,2.5,5,10,30,60,300,600,900,1800
      - CELERY_QUEUE_NAME_MAPPING=download:download,processing:processing
      - CELERY_WORKER_NAME_MAPPING=celery-download:download,celery-processing:processing
    networks:
      traefik_network:
        ipv4_address: 172.18.0.15

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_BROWSER: "on"
    volumes:
      - minio-data:/data
    labels:
      - "traefik.enable=true"
      # Middleware pour retirer le préfixe /api avant d'envoyer à MinIO
      - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      # API S3 - Avec le middleware pour retirer le préfixe
      - "traefik.http.routers.minio-api.rule=Host(`minio.stellarstudio.app`) && PathPrefix(`/api`)"
      - "traefik.http.routers.minio-api.middlewares=strip-api"
      - "traefik.http.routers.minio-api.service=minio-api-service"
      - "traefik.http.services.minio-api-service.loadbalancer.server.port=9000"
      # Console MinIO
      - "traefik.http.routers.minio-console.rule=Host(`minio.stellarstudio.app`)"
      - "traefik.http.routers.minio-console.service=minio-console-service"
      - "traefik.http.services.minio-console-service.loadbalancer.server.port=9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    networks:
      traefik_network:
        ipv4_address: 172.18.0.6

  frontend:
    build: 
      context: ./frontend
      args:
        BUILDKIT_INLINE_CACHE: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`www.stellarstudio.app`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=8080"
    volumes:
      - ./frontend:/app:delegated
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    env_file:
      - .env
    networks:
      traefik_network:
        ipv4_address: 172.18.0.16

  database:
    image: mariadb:10.5
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./data/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    networks:
      traefik_network:
        ipv4_address: 172.18.0.8

  mariadb-exporter:
    image: prom/mysqld-exporter
    user: "1030:100"
    volumes:
      - ${PWD}/config.my-cnf:/etc/mysqld_exporter/config.my-cnf
    command:
      - --config.my-cnf=/etc/mysqld_exporter/config.my-cnf
      - --collect.info_schema.tables
      - --collect.info_schema.innodb_metrics
      - --collect.global_status
      - --collect.global_variables
      - --collect.slave_status
      - --collect.info_schema.processlist
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    networks:
      traefik_network:
        ipv4_address: 172.18.0.17

  redis:
    image: redis:7-alpine
    user: "1030:1030"
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    networks:
      traefik_network:
        ipv4_address: 172.18.0.9

  redis-exporter:
    image: oliver006/redis_exporter
    command: --redis.addr=redis://redis:6379
    networks:
      traefik_network:
        ipv4_address: 172.18.0.19

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      traefik_network:
        ipv4_address: 172.18.0.18

volumes:
  grafana-data:
  prometheus-data:
  minio-data:
    driver: local
  frontend_node_modules:
  tmp:
    driver: local

networks:
  traefik_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/24
          gateway: 172.18.0.1
